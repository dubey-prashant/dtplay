<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>dPlayer</title>

  <link rel="stylesheet" href="/assets/index.css" />
  <link rel="stylesheet" href="/assets/style.css" />

  <script src="/assets/alpine.3.8.1.js" defer></script>


  <!-- https://www.freeiconspng.com/uploads/player-icon-0.png -->
  <link rel="icon" href="/assets/favicon.png" />
</head>

<body x-data="{ 
  sidebarOpen: false, 
  isMobile: window.innerWidth < 768,
  init() {
    this.$watch('isMobile', () => {
      if (!this.isMobile) this.sidebarOpen = false;
    });
    window.addEventListener('resize', () => {
      this.isMobile = window.innerWidth < 768;
    });
  }
}" class="flex h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 text-gray-200 font-sans overflow-hidden">
  <% const selectedVideo = 'Video Name' %>

  <!-- Mobile Menu Button -->
  <button @click="sidebarOpen = !sidebarOpen" 
    x-show="isMobile"
    class="fixed top-4 right-4 z-50 p-2 bg-gray-800 border border-gray-600 rounded-lg text-white hover:bg-gray-700 transition-colors md:hidden">
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
    </svg>
  </button>

  <!-- Sidebar -->
  <aside 
    x-show="!isMobile || sidebarOpen"
    @click.away="isMobile && (sidebarOpen = false)"
    x-transition:enter="transition ease-out duration-200"
    x-transition:enter-start="transform -translate-x-full"
    x-transition:enter-end="transform translate-x-0"
    x-transition:leave="transition ease-in duration-200"
    x-transition:leave-start="transform translate-x-0"
    x-transition:leave-end="transform -translate-x-full"
    class="overflow-y-auto w-full md:w-[25%] shrink-0 border-r border-gray-700 bg-gray-900 fixed md:relative z-40 h-full md:h-screen"
    :class="isMobile ? 'fixed inset-0 w-full' : 'md:w-[25%]'">
    <div class="p-4">
      <div class="flex items-center justify-between mb-6 pt-4 md:pt-0">
        <h1 class="text-2xl font-bold text-white">dPlayer</h1>
        <div class="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
            <path d="M8 5v14l11-7z" />
          </svg>
        </div>
      </div>

      <!-- Search Bar -->
      <div class="relative mb-6">
        <input type="text" id="search-input" placeholder="Search videos..."
          class="w-full bg-gray-800 border border-gray-600 rounded-lg px-4 py-2 pr-20 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" />
        <div class="absolute right-2 top-2.5 flex items-center gap-1">
          <button id="clear-search" class="p-1 text-gray-400 hover:text-white transition-colors rounded"
            style="display: none;" title="Clear search (Esc)">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
              <path
                d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z" />
            </svg>
          </button>
          <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
      </div>

      <!-- Recently Played -->
      <div id="recent-videos" class="mb-6" style="display: none;">
        <h3 class="text-sm font-semibold text-gray-400 uppercase tracking-wide mb-3">Recently Played</h3>
        <div id="recent-videos-list" class="space-y-2"></div>
      </div>

      <h3 class="text-sm font-semibold text-gray-400 uppercase tracking-wide mb-3">All Videos</h3>

      <!-- No Results Message -->
      <div id="no-results" class="text-center py-8 text-gray-400" style="display: none;">
        <svg class="w-12 h-12 mx-auto mb-3 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
        <p class="text-sm">No videos found</p>
        <p class="text-xs mt-1">Try a different search term</p>
      </div>

      <div id="video-list"><%- renderVideos(videos) %></div>
    </div>

    <!-- render list of videos based on type if its dir or file -->
    <% function renderVideos(videos) { %>
    <div class="space-y-1">
      <% videos.forEach(function({ name, type, path, videos }) { %>
      <% if (type === 'dir') { %>
      <div x-data="{ open: false }" class="video-item folder-item rounded-lg" data-name="<%= name.toLowerCase() %>"
        data-type="folder">
        <button @click="open = !open"
          class="w-full rounded-lg flex items-center justify-between text-left p-3 hover:bg-gray-800/50 hover:border-amber-600/50 border border-transparent transition-all group">
          <div class="min-w-0 overflow-hidden" style="width: calc(100% - 2rem);">
            <span class="text-white font-medium truncate block"><%= name %></span>
          </div>
          <span class="text-gray-400 h-4 w-4 transition-transform flex-shrink-0" :class="open ? 'rotate-180' : ''">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </span>
        </button>
        <div x-show="open" x-transition class="pl-4 mt-2">
          <%- renderVideos(videos) %>
        </div>
      </div>
      <% } else { %>
      <div class="video-item video-file" data-name="<%= name.toLowerCase() %>" data-type="video">
        <button onclick="selectVideo('<%= name %>', '<%= path %>'); if(window.innerWidth < 768) { document.querySelector('[x-data]').__x.$data.sidebarOpen = false; }"
          class="w-full rounded-lg text-left p-3 hover:bg-gray-800/50 hover:border-blue-600/50 border border-transparent transition-all group video-card"
          data-path="<%= path %>">
          <div class="flex items-center gap-2">
            <div
              class="w-8 h-6 bg-blue-600/20 border border-blue-600/30 rounded flex items-center justify-center group-hover:bg-blue-600 transition-colors flex-shrink-0">
              <svg class="w-4 h-4 text-blue-400 group-hover:text-white" fill="currentColor" viewBox="0 0 24 24">
                <path d="M8 5v14l11-7z" />
              </svg>
            </div>
            <div class="min-w-0 overflow-hidden" style="width: calc(100% - 2.5rem);">
              <span class="text-white font-medium truncate block"><%= name %></span>
            </div>
          </div>
        </button>
      </div>
      <% } %>
      <% }); %>
    </div>
    <% } %>
  </aside>

  <!-- Main Content -->
  <main class="px-4 md:px-8 py-6 w-full bg-gray-850 min-h-screen pt-6"
    :class="isMobile && sidebarOpen ? 'blur-sm' : ''">
    <div class="max-w-7xl mx-auto">
      <!-- Header -->
      <div class="mb-6 md:mb-8">
        <h1 class="text-2xl md:text-3xl font-bold mb-2 text-white" id="video-title">Welcome to dPlayer</h1>
        <p class="text-sm md:text-base text-gray-400" id="video-subtitle">Select a video from the sidebar to start watching</p>
      </div>

      <!-- Welcome State -->
      <div id="select-message" class="text-center py-20">
        <div class="w-24 h-24 bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-6">
          <svg class="w-12 h-12 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
            <path d="M8 5v14l11-7z" />
          </svg>
        </div>
        <h2 class="text-2xl font-semibold text-white mb-2">Ready to Watch</h2>
        <p class="text-lg text-gray-400 mb-8">Choose a video from your collection to get started</p>
        <div class="flex flex-wrap justify-center gap-4 text-sm text-gray-500">
          <div class="flex items-center gap-2">
            <kbd class="px-2 py-1 bg-gray-700 rounded text-xs">Space</kbd>
            <span>Play/Pause</span>
          </div>
          <div class="flex items-center gap-2">
            <kbd class="px-2 py-1 bg-gray-700 rounded text-xs">←→</kbd>
            <span>Seek</span>
          </div>
           <div class="flex items-center gap-2">
            <kbd class="px-2 py-1 bg-gray-700 rounded text-xs">↑↓</kbd>
            <span>Volume</span>
          </div>
          <div class="flex items-center gap-2">
            <kbd class="px-2 py-1 bg-gray-700 rounded text-xs">F</kbd>
            <span>Fullscreen</span>
          </div>
          <div class="flex items-center gap-2">
            <kbd class="px-2 py-1 bg-gray-700 rounded text-xs">M</kbd>
            <span>Mute</span>
          </div>
        </div>
      </div>
      <div id="player-container" style="display: none" class="relative w-full">
        <video id="video-player" autoplay class="w-full h-auto rounded-lg shadow-lg bg-black" preload="metadata" 
          style="max-height: 70vh; min-height: 200px;" playsinline>
          <source id="video-source" src="" type="video/mp4" />
          Your browser does not support the video tag.
        </video>

        <!-- Custom Video Controls -->
        <!-- Loading State -->
        <div id="video-loading" class="absolute inset-0 bg-black/50 flex items-center justify-center rounded-lg"
          style="display: none;">
          <div class="text-center">
            <div class="w-12 h-12 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-4">
            </div>
            <p class="text-white">Loading video...</p>
          </div>
        </div>

        <div id="video-controls"
          class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-2 md:p-4 rounded-b-lg">
          <!-- Progress Bar -->
          <div class="mb-1 md:mb-3">
            <div class="flex items-center gap-1 md:gap-2 text-xs md:text-sm text-white">
              <span id="current-time" aria-label="Current time" class="text-xs md:text-sm">00:00</span>
              <div class="flex-1 relative">
                <input type="range" id="progress-bar"
                  class="w-full h-1 md:h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer" min="0" max="100" value="0"
                  aria-label="Video progress"
                  style="background: linear-gradient(to right, #3b82f6 0%, #3b82f6 0%, #4b5563 0%, #4b5563 100%);" />
              </div>
              <span id="duration" aria-label="Total duration" class="text-xs md:text-sm">00:00</span>
            </div>
          </div>

          <!-- Control Buttons -->
          <div class="flex items-center justify-between gap-2 md:gap-3">
            <div class="flex items-center gap-2 md:gap-3">
              <button id="play-pause-btn"
                class="text-white hover:text-blue-400 transition-colors focus:ring-2 focus:ring-blue-500 rounded"
                aria-label="Play or pause video">
                <svg id="play-icon" class="w-6 h-6 md:w-8 md:h-8" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M8 5v14l11-7z" />
                </svg>
                <svg id="pause-icon" class="w-6 h-6 md:w-8 md:h-8 hidden" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z" />
                </svg>
              </button>

              <div class="flex items-center gap-1 md:gap-2">
                <button id="volume-btn"
                  class="text-white hover:text-blue-400 transition-colors focus:ring-2 focus:ring-blue-500 rounded"
                  aria-label="Toggle mute">
                  <svg id="volume-icon" class="w-5 h-5 md:w-6 md:h-6" fill="currentColor" viewBox="0 0 24 24">
                    <path
                      d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z" />
                  </svg>
                  <svg id="mute-icon" class="w-5 h-5 md:w-6 md:h-6 hidden" fill="currentColor" viewBox="0 0 24 24">
                    <path
                      d="M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z" />
                  </svg>
                </button>
                <input type="range" id="volume-slider" class="w-12 sm:w-16 md:w-20 h-1 md:h-2 rounded-lg appearance-none cursor-pointer"
                  style="background: #4b5563;" min="0" max="100" value="100" aria-label="Volume control" />
              </div>
            </div>

            <div class="flex items-center gap-2 md:gap-3">
              <select id="playback-speed"
                class="bg-gray-700 text-white text-xs md:text-sm rounded px-1 md:px-2 py-0.5 md:py-1 border-none focus:ring-2 focus:ring-blue-500"
                aria-label="Playback speed">
                <option value="0.5">0.5x</option>
                <option value="0.75">0.75x</option>
                <option value="1" selected>1x</option>
                <option value="1.25">1.25x</option>
                <option value="1.5">1.5x</option>
                <option value="2">2x</option>
              </select>

              <button id="fullscreen-btn"
                class="text-white hover:text-blue-400 transition-colors focus:ring-2 focus:ring-blue-500 rounded"
                aria-label="Toggle fullscreen">
                <svg class="w-5 h-5 md:w-6 md:h-6" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Keyboard Shortcuts (shown when video is playing) -->
      <div id="keyboard-shortcuts" style="display: none;" class="mt-6 text-center">
        <div class="flex flex-wrap justify-center gap-2 md:gap-4 text-xs text-gray-500">
          <div class="flex items-center gap-1">
            <kbd class="px-1.5 py-0.5 bg-gray-700/50 rounded text-xs">Space</kbd>
            <span class="hidden sm:inline">Play/Pause</span>
            <span class="sm:hidden">Play</span>
          </div>
          <div class="flex items-center gap-1">
            <kbd class="px-1.5 py-0.5 bg-gray-700/50 rounded text-xs">←→</kbd>
            <span class="hidden sm:inline">Seek ±10s</span>
            <span class="sm:hidden">Seek</span>
          </div>
          <div class="flex items-center gap-1">
            <kbd class="px-1.5 py-0.5 bg-gray-700/50 rounded text-xs">↑↓</kbd>
            <span>Volume</span>
          </div>
          <div class="flex items-center gap-1">
            <kbd class="px-1.5 py-0.5 bg-gray-700/50 rounded text-xs">F</kbd>
            <span>Fullscreen</span>
          </div>
          <div class="flex items-center gap-1">
            <kbd class="px-1.5 py-0.5 bg-gray-700/50 rounded text-xs">M</kbd>
            <span>Mute</span>
          </div>
        </div>
      </div>

      <!-- Network Access Info -->
      <div class="pt-4 flex flex-col sm:flex-row items-center justify-center gap-2 text-xs text-gray-500 px-2">
        <span class="opacity-75">Network access:</span>
        <div class="flex items-center gap-2">
          <code id="network-url" class="bg-gray-800/50 px-2 py-1 rounded text-gray-400 font-mono text-xs hover:bg-gray-800/70 transition-colors select-all break-all">
            <%= networkInfo.networkUrl %>
          </code>
          <button id="copy-url" class="p-1.5 text-gray-400 hover:text-blue-400 transition-colors rounded hover:bg-gray-800/50" title="Copy URL">
            <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 24 24">
              <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"/>
            </svg>
          </button>
        </div>
      </div>
  </main>

  <script>
    let isVideoControlsVisible = true;
    let controlsTimeout;
    let recentVideos = JSON.parse(localStorage.getItem('recent-videos') || '[]');

    function selectVideo(name, path) {
      document.getElementById('video-title').innerText = name;
      document.getElementById('video-subtitle').innerText = path;
      document.getElementById('select-message').style.display = 'none';
      document.getElementById('player-container').style.display = 'block';
      document.getElementById('keyboard-shortcuts').style.display = 'block';

      // Show loading state
      const loadingElement = document.getElementById('video-loading');
      loadingElement.style.display = 'flex';

      const videoElement = document.getElementById('video-player');
      const sourceElement = document.getElementById('video-source');
      sourceElement.src = path;
      videoElement.load();

      // Hide loading when video is ready
      videoElement.addEventListener('loadeddata', () => {
        loadingElement.style.display = 'none';
        videoElement.focus();
        
        // Restore saved playback speed
        const savedSpeed = localStorage.getItem('playback-speed') || '1';
        videoElement.playbackRate = parseFloat(savedSpeed);
        const speedSelect = document.getElementById('playback-speed');
        if (speedSelect) {
          speedSelect.value = savedSpeed;
        }
      }, { once: true });

      // Handle loading errors
      videoElement.addEventListener('error', () => {
        loadingElement.innerHTML = `
            <div class="text-center">
              <div class="w-12 h-12 bg-red-500 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                </svg>
              </div>
              <p class="text-white mb-2">Failed to load video</p>
              <button onclick="selectVideo('${name}', '${path}')" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                Retry
              </button>
            </div>
          `;
      }, { once: true });

      // Add to recent videos
      addToRecentVideos(name, path);

      // Update active state
      document.querySelectorAll('.video-card').forEach(card => {
        card.classList.remove('active');
      });
      document.querySelector(`[data-path="${path}"]`)?.classList.add('active');

      // Reset progress from localStorage if available
      const savedProgress = localStorage.getItem(`video-progress-${path}`);
      if (savedProgress && parseFloat(savedProgress) > 30) { // Only restore if more than 30 seconds
        videoElement.addEventListener('loadedmetadata', () => {
          videoElement.currentTime = parseFloat(savedProgress);
          updateVideoProgress(path, parseFloat(savedProgress), videoElement.duration);
        }, { once: true });
      }
    }

    function addToRecentVideos(name, path) {
      // Remove if already exists
      recentVideos = recentVideos.filter(video => video.path !== path);
      // Add to beginning
      recentVideos.unshift({ name, path, timestamp: Date.now() });
      // Keep only last 5
      recentVideos = recentVideos.slice(0, 5);
      localStorage.setItem('recent-videos', JSON.stringify(recentVideos));
      updateRecentVideosList();
    }

    function removeFromRecentVideos(index) {
      recentVideos.splice(index, 1);
      localStorage.setItem('recent-videos', JSON.stringify(recentVideos));
      updateRecentVideosList();
    }

    function updateRecentVideosList() {
      const recentContainer = document.getElementById('recent-videos');
      const recentList = document.getElementById('recent-videos-list');

      if (recentVideos.length === 0) {
        recentContainer.style.display = 'none';
        return;
      }

      recentContainer.style.display = 'block';
      recentList.innerHTML = recentVideos.map((video, index) => `
          <div class="relative group">
            <button
              onclick="selectVideo('${video.name}', '${video.path}')"
              class="w-full rounded-lg text-left p-2 hover:bg-gray-800/50 hover:border-blue-600/50 border border-transparent transition-all video-card"
              data-path="${video.path}"
            >
              <div class="flex items-center gap-2">
                <div class="w-8 h-6 bg-blue-600/20 border border-blue-600/20 rounded flex items-center justify-center group-hover:bg-blue-600 transition-colors flex-shrink-0">
                  <svg class="w-4 h-4 text-blue-400 group-hover:text-white" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M8 5v14l11-7z" />
                  </svg>
                </div>
                <div class="min-w-0" style="width: calc(100% - 3.5rem);">
                  <div class="text-sm text-white truncate pr-6">${video.name}</div> 
                </div>
              </div>
            </button>
            <button
              onclick="removeFromRecentVideos(${index})"
              class="absolute right-2 top-1/2 transform -translate-y-1/2 opacity-0 group-hover:opacity-100 p-1 text-gray-400 hover:text-red-400 transition-all rounded z-10"
              title="Remove from recent"
            >
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
              </svg>
            </button>
          </div>
        `).join('');
    }



    // Search functionality
    function initializeSearch() {
      const searchInput = document.getElementById('search-input');
      const clearButton = document.getElementById('clear-search');

      function updateClearButton() {
        if (searchInput.value.trim()) {
          clearButton.style.display = 'block';
        } else {
          clearButton.style.display = 'none';
        }
      }

      searchInput.addEventListener('input', (e) => {
        const searchTerm = e.target.value.toLowerCase().trim();
        performSearch(searchTerm);
        updateClearButton();
      });

      // Clear button functionality
      clearButton.addEventListener('click', () => {
        searchInput.value = '';
        performSearch('');
        updateClearButton();
        searchInput.focus();
      });

      // Keyboard shortcuts
      searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          searchInput.value = '';
          performSearch('');
          updateClearButton();
        }
      });

      // Initialize clear button state
      updateClearButton();
    }

    function performSearch(searchTerm) {
      const allItems = document.querySelectorAll('.video-item');
      const noResultsMessage = document.getElementById('no-results');

      if (searchTerm === '') {
        // Show all items when search is empty
        allItems.forEach(item => {
          item.style.display = 'block';
          // Reset any nested visibility
          const nestedItems = item.querySelectorAll('.video-item');
          nestedItems.forEach(nested => nested.style.display = 'block');
        });
        
        // Collapse all folders when search is cleared
        collapseAllFolders();
        noResultsMessage.style.display = 'none';
        return;
      }

      // Hide all items initially
      allItems.forEach(item => item.style.display = 'none');

      // Find matching items
      const matchingItems = [];

      allItems.forEach(item => {
        const itemName = item.dataset.name || '';
        const itemType = item.dataset.type || '';

        // Check if current item matches
        if (itemName.includes(searchTerm)) {
          matchingItems.push(item);
        }

        // For folders, also check if any children match
        if (itemType === 'folder') {
          const hasMatchingChildren = checkFolderForMatches(item, searchTerm);
          if (hasMatchingChildren) {
            matchingItems.push(item);
          }
        }
      });

      // Show matching items and their parents
      if (matchingItems.length > 0) {
        matchingItems.forEach(item => {
          showItemAndParents(item, searchTerm);
        });
        
        // Expand all folders that contain matching results
        expandAllMatchingFolders(searchTerm);
        noResultsMessage.style.display = 'none';
      } else {
        noResultsMessage.style.display = 'block';
      }
    }

    function checkFolderForMatches(folderItem, searchTerm) {
      const childItems = folderItem.querySelectorAll('.video-item');
      for (let child of childItems) {
        const childName = child.dataset.name || '';
        if (childName.includes(searchTerm)) {
          return true;
        }
        // Recursively check nested folders
        if (child.dataset.type === 'folder') {
          if (checkFolderForMatches(child, searchTerm)) {
            return true;
          }
        }
      }
      return false;
    }

    function showItemAndParents(item, searchTerm) {
      // Show the item itself
      item.style.display = 'block';

      // If it's a folder, show matching children
      if (item.dataset.type === 'folder') {
        const childItems = item.querySelectorAll('.video-item');
        childItems.forEach(child => {
          const childName = child.dataset.name || '';
          if (childName.includes(searchTerm)) {
            child.style.display = 'block';
            showItemAndParents(child, searchTerm);
          } else if (child.dataset.type === 'folder' && checkFolderForMatches(child, searchTerm)) {
            child.style.display = 'block';
            showItemAndParents(child, searchTerm);
          }
        });

        // Auto-expand folder if it contains matches
        const alpineElement = item.querySelector('[x-data]');
        if (alpineElement && window.Alpine) {
          try {
            const alpineData = Alpine.$data(alpineElement);
            if (alpineData) {
              alpineData.open = true;
            }
          } catch (e) {
            // Fallback: manually trigger click to open folder
            const button = item.querySelector('button');
            if (button && !button.getAttribute('aria-expanded')) {
              button.click();
            }
          }
        }
      }

      // Show parent folders
      let parent = item.parentElement;
      while (parent) {
        if (parent.classList.contains('video-item')) {
          parent.style.display = 'block';
          // Auto-expand parent folder
          const alpineElement = parent.querySelector('[x-data]');
          if (alpineElement && window.Alpine) {
            try {
              const alpineData = Alpine.$data(alpineElement);
              if (alpineData) {
                alpineData.open = true;
              }
            } catch (e) {
              // Fallback: manually trigger click to open folder
              const button = parent.querySelector('button');
              if (button && !button.getAttribute('aria-expanded')) {
                button.click();
              }
            }
          }
        }
        parent = parent.parentElement;
      }
    }

    function collapseAllFolders() {
      // Find all folder items and collapse them
      const folderItems = document.querySelectorAll('[data-type="folder"]');
      folderItems.forEach(folderItem => {
        // Try to get the Alpine component directly from the element
        if (folderItem._x_dataStack && folderItem._x_dataStack[0]) {
          folderItem._x_dataStack[0].open = false;
        } else if (window.Alpine && Alpine.$data) {
          try {
            const alpineData = Alpine.$data(folderItem);
            if (alpineData) {
              alpineData.open = false;
            }
          } catch (e) {
            console.log('Alpine data access failed for collapse');
            // Fallback: if folder is open, click to close it
            const button = folderItem.querySelector('button[\\@click]');
            const expandableDiv = folderItem.querySelector('[x-show]');
            if (button && expandableDiv && expandableDiv.style.display !== 'none') {
              button.click();
            }
          }
        } else {
          // Final fallback: if folder appears open, click to close it
          const button = folderItem.querySelector('button[\\@click]');
          const expandableDiv = folderItem.querySelector('[x-show]');
          if (button && expandableDiv && expandableDiv.style.display !== 'none') {
            button.click();
          }
        }
      });
    }

    function expandAllMatchingFolders(searchTerm) {
      // Find all folders that contain matching videos and expand them
      const folderItems = document.querySelectorAll('[data-type="folder"]');
      folderItems.forEach(folderItem => {
        if (checkFolderForMatches(folderItem, searchTerm)) {
          // Try to get the Alpine component directly from the element
          if (folderItem._x_dataStack && folderItem._x_dataStack[0]) {
            folderItem._x_dataStack[0].open = true;
          } else if (window.Alpine && Alpine.$data) {
            try {
              const alpineData = Alpine.$data(folderItem);
              if (alpineData) {
                alpineData.open = true;
              }
            } catch (e) {
              console.log('Alpine data access failed, trying button click');
              // Fallback: trigger the button click to expand
              const button = folderItem.querySelector('button[\\@click]');
              if (button) {
                button.click();
              }
            }
          } else {
            // Final fallback: trigger button click
            const button = folderItem.querySelector('button[\\@click]');
            if (button) {
              button.click();
            }
          }
        }
      });
    }

    // Initialize video player controls
    document.addEventListener('DOMContentLoaded', function () {
      const video = document.getElementById('video-player');
      const playPauseBtn = document.getElementById('play-pause-btn');
      const playIcon = document.getElementById('play-icon');
      const pauseIcon = document.getElementById('pause-icon');
      const progressBar = document.getElementById('progress-bar');
      const currentTimeSpan = document.getElementById('current-time');
      const durationSpan = document.getElementById('duration');
      const volumeBtn = document.getElementById('volume-btn');
      const volumeIcon = document.getElementById('volume-icon');
      const muteIcon = document.getElementById('mute-icon');
      const volumeSlider = document.getElementById('volume-slider');
      const playbackSpeed = document.getElementById('playback-speed');
      const fullscreenBtn = document.getElementById('fullscreen-btn');
      const videoControls = document.getElementById('video-controls');
      const playerContainer = document.getElementById('player-container');

      // Format time helper
      function formatTime(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
      }

      // Play/Pause functionality
      playPauseBtn.addEventListener('click', () => {
        if (video.paused) {
          video.play();
        } else {
          video.pause();
        }
      });

      video.addEventListener('play', () => {
        playIcon.classList.add('hidden');
        pauseIcon.classList.remove('hidden');
      });

      video.addEventListener('pause', () => {
        playIcon.classList.remove('hidden');
        pauseIcon.classList.add('hidden');
      });

      // Click video to play/pause
      video.addEventListener('click', () => {
        if (video.paused) {
          video.play();
        } else {
          video.pause();
        }
      });

      // Progress bar
      video.addEventListener('timeupdate', () => {
        if (video.duration) {
          const progress = (video.currentTime / video.duration) * 100;
          progressBar.value = progress;
          progressBar.style.background = `linear-gradient(to right, #3b82f6 0%, #3b82f6 ${progress}%, #4b5563 ${progress}%, #4b5563 100%)`;
          currentTimeSpan.textContent = formatTime(video.currentTime);

          // Save progress to localStorage with duration
          const videoSrc = document.getElementById('video-source').src;
          if (videoSrc && Math.floor(video.currentTime) % 5 === 0) { // Save every 5 seconds
            const progressData = {
              currentTime: video.currentTime,
              duration: video.duration,
              timestamp: Date.now()
            };
            localStorage.setItem(`video-progress-${videoSrc}`, JSON.stringify(progressData));
          }
        }
      });

      video.addEventListener('loadedmetadata', () => {
        durationSpan.textContent = formatTime(video.duration);
        progressBar.max = 100;
      });

      progressBar.addEventListener('input', () => {
        if (video.duration) {
          const time = (progressBar.value / 100) * video.duration;
          video.currentTime = time;
        }
      });

      // Volume controls
      volumeBtn.addEventListener('click', () => {
        video.muted = !video.muted;
        if (video.muted) {
          volumeIcon.classList.add('hidden');
          muteIcon.classList.remove('hidden');
          volumeSlider.value = 0;
        } else {
          volumeIcon.classList.remove('hidden');
          muteIcon.classList.add('hidden');
          volumeSlider.value = video.volume * 100;
        }
      });

      volumeSlider.addEventListener('input', () => {
        video.volume = volumeSlider.value / 100;
        video.muted = volumeSlider.value == 0;
        if (video.muted) {
          volumeIcon.classList.add('hidden');
          muteIcon.classList.remove('hidden');
        } else {
          volumeIcon.classList.remove('hidden');
          muteIcon.classList.add('hidden');
        }
      });

      // Playback speed
      playbackSpeed.addEventListener('change', () => {
        const speed = playbackSpeed.value;
        video.playbackRate = parseFloat(speed);
        // Save playback speed to localStorage
        localStorage.setItem('playback-speed', speed);
      });

      // Fullscreen
      fullscreenBtn.addEventListener('click', () => {
        if (document.fullscreenElement) {
          document.exitFullscreen();
        } else {
          playerContainer.requestFullscreen();
        }
      });

      // Keyboard shortcuts
      document.addEventListener('keydown', (e) => {
        if (document.getElementById('player-container').style.display !== 'none') {
          switch (e.code) {
            case 'Space':
              e.preventDefault();
              if (video.paused) video.play();
              else video.pause();
              break;
            case 'ArrowLeft':
              e.preventDefault();
              video.currentTime = Math.max(0, video.currentTime - 10);
              break;
            case 'ArrowRight':
              e.preventDefault();
              video.currentTime = Math.min(video.duration, video.currentTime + 10);
              break;
            case 'ArrowUp':
              e.preventDefault();
              video.volume = Math.min(1, video.volume + 0.1);
              volumeSlider.value = video.volume * 100;
              break;
            case 'ArrowDown':
              e.preventDefault();
              video.volume = Math.max(0, video.volume - 0.1);
              volumeSlider.value = video.volume * 100;
              break;
            case 'KeyM':
              e.preventDefault();
              volumeBtn.click();
              break;
            case 'KeyF':
              e.preventDefault();
              fullscreenBtn.click();
              break;
          }
        }
      });

      // Auto-hide controls
      function showControls() {
        videoControls.style.opacity = '1';
        videoControls.style.pointerEvents = 'all';
        isVideoControlsVisible = true;
      }

      function hideControls() {
        if (!video.paused) {
          videoControls.style.opacity = '0';
          videoControls.style.pointerEvents = 'none';
          isVideoControlsVisible = false;
        }
      }

      playerContainer.addEventListener('mousemove', () => {
        showControls();
        clearTimeout(controlsTimeout);
        controlsTimeout = setTimeout(hideControls, 3000);
      });

      playerContainer.addEventListener('mouseleave', () => {
        clearTimeout(controlsTimeout);
        controlsTimeout = setTimeout(hideControls, 1000);
      });

      video.addEventListener('pause', showControls);
      video.addEventListener('play', () => {
        controlsTimeout = setTimeout(hideControls, 3000);
      });

      // Initialize search
      initializeSearch();

      // Load recent videos on page load
      updateRecentVideosList();

      // Copy URL functionality
      const copyButton = document.getElementById('copy-url');
      if (copyButton) {
        copyButton.addEventListener('click', () => {
          const networkUrl = document.getElementById('network-url').textContent;
          navigator.clipboard.writeText(networkUrl).then(() => {
            // Show success feedback
            const originalIcon = copyButton.innerHTML;
            copyButton.innerHTML = `
              <svg class="w-3 h-3 text-green-400" fill="currentColor" viewBox="0 0 24 24">
                <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
              </svg>
            `;
            setTimeout(() => {
              copyButton.innerHTML = originalIcon;
            }, 2000);
          });
        });
      }


    });
  </script>
</body>

</html>